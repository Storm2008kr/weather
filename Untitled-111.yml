esphome:
  name: wemosd1
  friendly_name: Wemos D1 mini

esp8266:
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

########## Setup #######################

i2c:
  sda: GPIO00
  scl: GPIO02
  scan: true

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13

uart:
  rx_pin: GPIO01
  baud_rate: 9600

  debug:
    direction: RX
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: |-
          UARTDebug::log_string(direction, bytes);  //Still log the data
          uint8_t checksum = 0;
          for (int i=0; i < bytes.size(); i++) {
            checksum+= bytes[i];
          }
          if (checksum==0){
            ESP_LOGD("UART","PM1006|PM1006k checksum validated, have %d", checksum);
            if (bytes.size()==20 and (bytes[0]==22 and bytes[1]==17 and bytes[2]==11)) {
              ESP_LOGD("UART", "Correct PM1006 response recieved. Updating sensors");
              id(pm2).publish_state(bytes[5]*256+bytes[6]); 
              id(pm1).publish_state(bytes[9]*256+bytes[10]);
              id(pm10).publish_state(bytes[13]*256+bytes[14]);
            }
            if (bytes.size()==16 and (bytes[0]==22 and bytes[1]==13 and bytes[2]==2)) {
              ESP_LOGD("UART", "Correct PM1006K response recieved. Updating sensors");
              id(pm2).publish_state(bytes[5]*256+bytes[6]); 
              id(pm1).publish_state(bytes[9]*256+bytes[10]);
              id(pm10).publish_state(bytes[13]*256+bytes[14]);
            }
          }
          else{
            ESP_LOGW("UART","PM1006|PM1006k checksum is wrong: %02x, expected zero. Sensors will not be updated", checksum);
          }
          
font:
  - file: "Roboto-Thin.ttf"
    id: font0
    size: 15
    glyphs: |-
      !"%()+=,-_.:°0123456789АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчщьыъэюяabcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
    # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: font3
    size: 15 
  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: font2
    size: 30    

image:
  - file: mdi:wifi-strength-1
    id: i_wifi1
    resize: 20x20 
  - file: mdi:wifi-strength-2
    id: i_wifi2
    resize: 20x20 
  - file: mdi:wifi-strength-3
    id: i_wifi3
    resize: 20x20 
  - file: mdi:wifi-strength-4
    id: i_wifi4
    resize: 20x20 
  - file: mdi:wifi-strength-off-outline
    id: i_wifioff
    resize: 20x20 
  - file: mdi:white-balance-sunny
    id: i_white_balance_sunny
    resize: 20x20
  - file: mdi:weather-sunny
    id: i_weather_sunny
    resize: 20x20 
  - file: mdi:moon-waning-crescent
    id: i_moon
    resize: 20x20 

display:
  - platform: st7735
    model: "INITR_18BLACKTAB"
    reset_pin: GPIO05
    cs_pin: GPIO15
    dc_pin: GPIO04
    rotation: 180
    device_width: 128
    device_height: 160
    col_start: 0
    row_start: 0
    eight_bit_color: true
    update_interval: 15s
    id: my_display
    pages:
      - id: page1
        lambda: |-
          uint16_t var = (id(WiFiP).state);
          switch (var) {
            case 0 ... 24: it.image(108, 0, id(i_wifi1), red); break;
            case 25 ... 49: it.image(108, 0, id(i_wifi2), yellow); break;
            case 50 ... 74: it.image(108, 0, id(i_wifi3), lgreen); break;
            case 75 ... 100: it.image(108, 0, id(i_wifi4), green); break;
            default: it.image(108, 0, id(i_wifioff), red); break;
            }
          it.strftime(it.get_width() / 2, 8, id(font3), my_white, TextAlign::CENTER, "%H:%M", id(ntp).now());
          it.print(64, 22, id(font0), my_red, TextAlign::CENTER,  "PM1 мкг/m3");
          it.printf(64, 44, id(font2), my_red, TextAlign::CENTER, "%.0f", id(pm1).state);
          it.print(64, 70, id(font0), my_white, TextAlign::CENTER,  "PM2.5 мкг/m3");
          it.printf(64, 92, id(font2), my_yellow, TextAlign::CENTER, "%.0f ", id(pm2).state);
          it.print(64, 123, id(font0), my_white, TextAlign::CENTER,  "PM10 мкг/m3");
          it.printf(64, 145, id(font2), my_white, TextAlign::CENTER, "%.0f", id(pm10).state);
      - id: page2
        lambda: |-
          uint16_t var = (id(WiFiP).state);
          switch (var) {
            case 0 ... 24: it.image(108, 0, id(i_wifi1), red); break;
            case 25 ... 49: it.image(108, 0, id(i_wifi2), yellow); break;
            case 50 ... 74: it.image(108, 0, id(i_wifi3), lgreen); break;
            case 75 ... 100: it.image(108, 0, id(i_wifi4), green); break;
            default: it.image(108, 0, id(i_wifioff), red); break;
            }
          it.strftime(it.get_width() / 2, 8, id(font3), my_white, TextAlign::CENTER, "%H:%M", id(ntp).now());
          it.print(64, 22, id(font0), my_white, TextAlign::CENTER,  "ТЕМПЕРАТУРА");
          it.printf(64, 44, id(font2), my_white, TextAlign::CENTER, "%.1f °C", id(bme280_temperature).state);
          it.print(64, 70, id(font0), my_blue, TextAlign::CENTER,  "ВЛАЖНОСТЬ");
          it.printf(64, 92, id(font2), my_blue, TextAlign::CENTER, "%.1f %%", id(bme280_humidity).state);
          it.print(64, 123, id(font0), my_white, TextAlign::CENTER,  "ДАВЛЕНИЕ");
          it.printf(64, 145, id(font2), my_white, TextAlign::CENTER, "%.1f hPa", id(bme280_pressure).state);
interval:
  - interval: 15s
    then:
      - display.page.show_next: my_display
      - component.update: my_display        
   
color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%    
  - id: red
    red: 100%
    green: 30%
    blue: 30%

  - id: tred
    red: 100%
    green: 0%
    blue: 0%

  - id: yellow
    red: 100%
    green: 100%
    blue: 0%

  - id: lyellow
    red: 100%
    green: 50%
    blue: 0%

  - id: green
    red: 0%
    green: 100%
    blue: 0%

  - id: lgreen
    red: 70%
    green: 100%
    blue: 0% 

  - id: blue
    red: 0%
    green: 100%
    blue: 100%

  - id: white
    red: 100%
    green: 100%
    blue: 100%

  - id: black
    red: 0%
    green: 0%
    blue: 0%  


sensor:
  - platform: bme280_i2c
    temperature:
      name: "BME280 Temperature"
      id: bme280_temperature
    pressure:
      name: "BME280 Pressure"
      id: bme280_pressure
    humidity:
      name: "BME280 Realtive Humidity"
      id: bme280_humidity
    address: 0x76
    update_interval: 10s
  - platform: template
    name: "Altitude"
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(bme280_temperature).state + 273.15) / 0.0065) * (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure).state), 0.190234) - 1); // in meter
    update_interval: 60s
  - platform: template
    name: "Absolute Humidity"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) / (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) / ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    update_interval: 60s

  - platform: template
    name: "PM 1.0"
    id: "pm1"
    device_class: PM1
    accuracy_decimals: 0
    unit_of_measurement: µg/m³

  - platform: template
    name: "PM 2.5"
    id: "pm2"
    device_class: PM25
    accuracy_decimals: 0
    unit_of_measurement: µg/m³
  - platform: template
    name: "PM 10 "
    id: "pm10"
    device_class: PM10
    accuracy_decimals: 0
    unit_of_measurement: µg/m³
  - platform: wifi_signal
    name: "${name} Wifi"
    update_interval: 60s  
    id: wifi_signal_db
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${name} WiFi Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    id: WiFiP

       
time:
  - platform: homeassistant
    id: ntp

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ezI65nG2RVzS9yDh/YOyr7sGT64XRbL6uHYlfyVxLFI=


# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:


# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:


# To have a "next url" for improv serial
web_server:
